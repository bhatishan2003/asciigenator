name: CI & Release

on:
  push:
    branches: ["main"]
    tags:
      - "v*.*.*" # Trigger workflow when a version tag is pushed
  pull_request:
    branches: ["main"]

permissions:
  contents: write # needed for creating GitHub releases
  id-token: write # needed for PyPI trusted publishing (optional)

jobs:
  # --- Build & Test ---
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest pytest-cov build
          pip install -e .[test]

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run tests with coverage
        run: |
          pytest -s --cov=asciigenator --cov-branch \
                 --cov-report=term-missing \
                 --cov-report=xml \
                 --cov-report=html

      - name: Build distributions
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          python -m pip install build
          python -m build

      - name: Upload distributions (artifact)
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Upload coverage HTML (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: htmlcov

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: coverage.xml
          fail_ci_if_error: true

  # --- Release to GitHub ---
  release:
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4

      - name: Download distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          files: dist/* # âœ… Attach built dists to the release

  # --- Publish to PyPI ---
  pypi-publish:
    runs-on: ubuntu-latest
    needs: release
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: ${{ secrets.PYPI_USERNAME }}
          password: ${{ secrets.PYPI_PASSWORD }}
          packages-dir: dist/
